<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="http://helixtoolkit.codeplex.com"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" 
                    mc:Ignorable="d">

	<SolidColorBrush x:Key="atDark_fg" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="atDark_textHighlight" Color="#FFF0F0F0"/>
	<SolidColorBrush x:Key="atDark_bgLight" Color="#43000000"/>
	<SolidColorBrush x:Key="atDark_bgDark" Color="#48000000"/>
	<SolidColorBrush x:Key="atDark_bgDarkHighlight" Color="#12FFFFFF"/>
	<SolidColorBrush x:Key="atDark_bgDarkActive" Color="#04FFFFFF"/>
	<SolidColorBrush x:Key="atDark_bgDarkActiveHighlight" Color="#16FFFFFF"/>
	<SolidColorBrush x:Key="atDark_border" Color="Gold" />
	<SolidColorBrush x:Key="atDark_borderHighlight" Color="LightGray" />
    <SolidColorBrush x:Key="atDark_inactive" Color="#16FFFFFF"/>

    <LinearGradientBrush x:Key="atDark_windowBg" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF282828" Offset="0.75" />
        <GradientStop Color="#FF101010" Offset="1" />
    </LinearGradientBrush>
    
    <Style TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="Background" Value="{DynamicResource atDark_bgDark}"/>
		<Setter Property="BorderBrush" Value="Gold"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Border.CornerRadius" Value="0"/>
		<Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
		<Setter Property="Height" Value="22"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border x:Name="mainBorder"
                    CornerRadius="{TemplateBinding Border.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter ContentSource="Content"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource atDark_bgDarkHighlight}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource atDark_bgDarkActive}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource atDark_bgDark}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="mainBorder"
                    CornerRadius="{TemplateBinding Border.CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter ContentSource="Content"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource atDark_bgDarkHighlight}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource atDark_bgDarkActive}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#28FFFFFF"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource atDark_fg}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#16FFFFFF"/>
                            <Setter Property="BorderBrush" Value="#16FFFFFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#32FFFFFF"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LODBox">
        <Style.Resources>
            <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
            </Style>
            <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Width" Value="20"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
	</Style>

	<Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource atDark_bgLight}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Padding="2">
						<ScrollViewer Margin="0"
                          x:Name="PART_ContentHost" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource atDark_borderHighlight}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource atDark_borderHighlight}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style x:Key="SeeThru">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource atDark_fg}"/>
    </Style>

    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
    </Style>

	<Style x:Key="LabelListBoxHeader" TargetType="Label">
        <Setter Property="Background" Value="{DynamicResource atDark_bgDark}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
		<Setter Property="BorderThickness" Value="1,1,1,0"/>
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
		<Setter Property="FontWeight" Value="Light"/>
		<Setter Property="Height" Value="25"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
	</Style>

    <Style x:Key="BorderListBox" TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource atDark_fg}"/>
        <Setter Property="Background" Value="{DynamicResource atDark_bgLight}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
		<Setter Property="BorderThickness" Value="1"/>
	</Style>

	<Style TargetType="ListBoxItem">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightGray" Opacity="0.19"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="LightGray" Opacity="0.19"/>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TreeViewItem">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightGray" Opacity="0.19"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="LightGray" Opacity="0.19"/>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource atDark_fg}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <ControlTemplate.Resources>
                        <Style TargetType="Border">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource atDark_border}"/>
                            <Setter Property="Background" Value="{DynamicResource atDark_bgLight}"/>
                        </Style>

                        <Style TargetType="ListBox" BasedOn="{StaticResource SeeThru}"/>
                        <Style TargetType="ListView" BasedOn="{StaticResource SeeThru}"/>
                        <Style TargetType="TextBox" BasedOn="{StaticResource SeeThru}"/>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource SeeThru}"/>
                        <Style TargetType="TreeView" BasedOn="{StaticResource SeeThru}"/>
                    </ControlTemplate.Resources>
                    
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0" Content="{TemplateBinding Header}" Padding="0" Margin="0" Style="{DynamicResource LabelListBoxHeader}"/>
                        <Border Grid.Row="1">
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <Style x:Key="RadioToggleButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF3F3F3" Offset="0"/>
                    <GradientStop Color="#FFEBEBEB" Offset="0.5"/>
                    <GradientStop Color="#FFDDDDDD" Offset="0.5"/>
                    <GradientStop Color="#FFCDCDCD" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding Button.IsDefaulted}" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Themes:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="RenderDefaulted" TargetName="Chrome" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
